{"ast":null,"code":"import _regeneratorRuntime from \"/home/ahmad/Desktop/Cresto/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ahmad/Desktop/Cresto/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar apiUser = null;\nvar apiOwner = null;\nvar userExist = null;\nvar version = 3;\nvar versionCheck = null;\nexport function userExists() {\n  return _userExists.apply(this, arguments);\n}\n\nfunction _userExists() {\n  _userExists = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            //check databse if user exists\n            //for demonstration purposes\n            if (userExist) {//retrieve their wallet from database\n              //maybe just scan the qr code of the seller by phone and pay\n            } else {//create wallet\n                // let newUserPrivatekey = await EVT.EvtKey.randomPrivateKey();\n                // let newUserPublicKey = EVT.EvtKey.privateToPublic(key);\n                //store in database or on user's phone\n              }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _userExists.apply(this, arguments);\n}\n\nexport function investEVT() {\n  return _investEVT.apply(this, arguments);\n}\n\nfunction _investEVT() {\n  _investEVT = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var ownerKeyPublic, ownerKeyPrivate, userKeyPublic, network, userEVT, ownerBalanceBefore, userTRX, ownerBalanceAfter, ownerTRX, deg;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            document.getElementById(\"investClear\").innerHTML = \"Investing.. (Please be patient, may take up to 10 seconds)\"; //NOT SECURE WAY, just for demonstration purposes\n\n            ownerKeyPublic = \"EVT6QpgkCXNRMoe53dzTfZDs8ipwDq5esXA6KyEF6jRFpWLBA1ppk\";\n            ownerKeyPrivate = \"5Jk1tWkYXMSWcnwBG3aRNvfCNaGfizX6axF7rpfmzuMmtFzJhXo\";\n            userKeyPublic = \"EVT7mo5QXe86bd3J27Gn4cQpf7VVntcZeF86Kw3baNgGFsMLK9atg\"; //get apiOwner to transfer Degron token to apiUser\n\n            network = {\n              host: 'testnet1.everitoken.io',\n              port: 8888,\n              protocol: 'http'\n            }; // get apiUser instance\n\n            _context2.next = 7;\n            return window.EVT({\n              endpoint: network,\n              keyProvider: [ownerKeyPrivate]\n            });\n\n          case 7:\n            apiOwner = _context2.sent;\n            //invest user defined amount;\n            userEVT = document.getElementById(\"sendEVT\").value;\n            _context2.next = 11;\n            return apiOwner.getFungibleBalance(ownerKeyPublic, 1);\n\n          case 11:\n            ownerBalanceBefore = _context2.sent;\n            _context2.next = 14;\n            return apiUser.pushTransaction({\n              maxCharge: 100000\n            }, // limit of the transaction fee\n            new window.EVT.EvtAction(\"transferft\", {\n              from: userKeyPublic,\n              // sender\n              to: ownerKeyPublic,\n              // receiver\n              number: userEVT + \".00000 S#1\",\n              // S#1 means the No 1 fungible token (EVT token)\n              memo: \"Investor\" // Comment or extra data\n\n            }));\n\n          case 14:\n            userTRX = _context2.sent;\n            _context2.next = 17;\n            return apiOwner.getFungibleBalance(ownerKeyPublic, 1);\n\n          case 17:\n            ownerBalanceAfter = _context2.sent;\n\n            if (!(ownerBalanceAfter <= ownerBalanceBefore)) {\n              _context2.next = 20;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 20:\n            _context2.next = 22;\n            return apiOwner.pushTransaction({\n              maxCharge: 100000\n            }, // limit of the transaction fee\n            new window.EVT.EvtAction(\"transferft\", {\n              from: ownerKeyPublic,\n              // sender\n              to: userKeyPublic,\n              // receiver\n              number: userEVT + \".00000 S#567\",\n              // S#1 means the No 1 fungible token (EVT token)\n              memo: \"Customer\" // Comment or extra data\n\n            }));\n\n          case 22:\n            ownerTRX = _context2.sent;\n            //alert(\"Transfer complete\");\n            document.getElementById(\"investClear\").innerHTML = \"Invested!\";\n            document.getElementById(\"sendEVT\").value = '';\n            document.getElementById(\"deg\").value = \"loading degron\";\n            _context2.next = 28;\n            return apiUser.getFungibleBalance(userKeyPublic, 567);\n\n          case 28:\n            deg = _context2.sent;\n            document.getElementById(\"deg\").value = deg;\n\n          case 30:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _investEVT.apply(this, arguments);\n}\n\nexport function importWallet() {\n  return _importWallet.apply(this, arguments);\n}\n\nfunction _importWallet() {\n  _importWallet = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var userKeyPrivate, userKeyPublic, network, version, info, apiVersion, evt, deg;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            //alert(\"okay\");\n            userKeyPrivate = \"5K9esKA7AKFQ7JpCRPvCMPRozTynhdahHYVo64v2CWXQjLgrNto\";\n            userKeyPublic = \"EVT7mo5QXe86bd3J27Gn4cQpf7VVntcZeF86Kw3baNgGFsMLK9atg\";\n            network = {\n              host: 'testnet1.everitoken.io',\n              port: 8888,\n              protocol: 'http'\n            }; // get apiUser instance\n\n            _context3.next = 5;\n            return window.EVT({\n              endpoint: network,\n              keyProvider: [userKeyPrivate]\n            });\n\n          case 5:\n            apiUser = _context3.sent;\n            _context3.prev = 6;\n\n            if (!(apiUser != null)) {\n              _context3.next = 23;\n              break;\n            }\n\n            document.getElementById(\"status\").value = \"Connected\";\n            version = 3;\n            _context3.next = 12;\n            return apiUser.getInfo();\n\n          case 12:\n            info = _context3.sent;\n            apiVersion = info.evt_api_version.split(\".\")[0];\n            document.getElementById(\"version\").value = info.evt_api_version; //version check\n\n            if (!(apiVersion == version)) {\n              _context3.next = 19;\n              break;\n            }\n\n            versionCheck = true; //if invalid version prevent code from running\n\n            _context3.next = 21;\n            break;\n\n          case 19:\n            versionCheck = false;\n            return _context3.abrupt(\"return\");\n\n          case 21:\n            _context3.next = 24;\n            break;\n\n          case 23:\n            alert(\"EveriToken api is not ready, be patient\");\n\n          case 24:\n            _context3.next = 29;\n            break;\n\n          case 26:\n            _context3.prev = 26;\n            _context3.t0 = _context3[\"catch\"](6);\n            console.log(_context3.t0.message);\n\n          case 29:\n            _context3.prev = 29;\n            document.getElementById(\"evt\").value = \"loading evt\";\n            _context3.next = 33;\n            return apiUser.getFungibleBalance(userKeyPublic, 1);\n\n          case 33:\n            evt = _context3.sent;\n            document.getElementById(\"evt\").value = evt;\n            document.getElementById(\"deg\").value = \"loading degron\";\n            _context3.next = 38;\n            return apiUser.getFungibleBalance(userKeyPublic, 567);\n\n          case 38:\n            deg = _context3.sent;\n            document.getElementById(\"deg\").value = deg;\n            _context3.next = 46;\n            break;\n\n          case 42:\n            _context3.prev = 42;\n            _context3.t1 = _context3[\"catch\"](29);\n            document.getElementById(\"evt\").value = _context3.t1.message;\n            document.getElementById(\"deg\").value = _context3.t1.message;\n\n          case 46:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this, [[6, 26], [29, 42]]);\n  }));\n  return _importWallet.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/ahmad/Desktop/Cresto/client/src/components/investors/DegronEvt.js"],"names":["apiUser","apiOwner","userExist","version","versionCheck","userExists","investEVT","document","getElementById","innerHTML","ownerKeyPublic","ownerKeyPrivate","userKeyPublic","network","host","port","protocol","window","EVT","endpoint","keyProvider","userEVT","value","getFungibleBalance","ownerBalanceBefore","pushTransaction","maxCharge","EvtAction","from","to","number","memo","userTRX","ownerBalanceAfter","ownerTRX","deg","importWallet","userKeyPrivate","getInfo","info","apiVersion","evt_api_version","split","alert","console","log","message","evt"],"mappings":"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","sourcesContent":["\n\n    var apiUser = null;\n    var apiOwner = null;\n    var userExist = null;\n    var version = 3;\n    var versionCheck = null;\n    \n  \n\n    export async function userExists(){\n\n        //check databse if user exists\n        //for demonstration purposes\n        if (userExist){\n            //retrieve their wallet from database\n            //maybe just scan the qr code of the seller by phone and pay\n    \n        }\n        else{\n            //create wallet\n           // let newUserPrivatekey = await EVT.EvtKey.randomPrivateKey();\n           // let newUserPublicKey = EVT.EvtKey.privateToPublic(key);\n           //store in database or on user's phone\n        }\n    \n    }\n    \n    export async function investEVT(){\n        \n            document.getElementById(\"investClear\").innerHTML = \"Investing.. (Please be patient, may take up to 10 seconds)\";\n\n            //NOT SECURE WAY, just for demonstration purposes\n            let ownerKeyPublic = \"EVT6QpgkCXNRMoe53dzTfZDs8ipwDq5esXA6KyEF6jRFpWLBA1ppk\";\n            let ownerKeyPrivate = \"5Jk1tWkYXMSWcnwBG3aRNvfCNaGfizX6axF7rpfmzuMmtFzJhXo\"\n            let userKeyPublic = \"EVT7mo5QXe86bd3J27Gn4cQpf7VVntcZeF86Kw3baNgGFsMLK9atg\";\n\n            //get apiOwner to transfer Degron token to apiUser\n            const network = {\n            host: 'testnet1.everitoken.io', \n            port: 8888,                     \n            protocol: 'http'               \n            };\n    \n            // get apiUser instance\n            apiOwner = await window.EVT({\n            endpoint: network,\n            keyProvider: [ ownerKeyPrivate ] \n            });\n\n\n            //invest user defined amount;\n            let userEVT = document.getElementById(\"sendEVT\").value;\n            \n            let ownerBalanceBefore = await apiOwner.getFungibleBalance(ownerKeyPublic, 1);\n            \n            \n            let userTRX = await apiUser.pushTransaction(\n            { maxCharge: 100000 },   // limit of the transaction fee\n            new window.EVT.EvtAction(\"transferft\", {\n                from: userKeyPublic, // sender\n                to: ownerKeyPublic, // receiver\n                number: userEVT + \".00000 S#1\", // S#1 means the No 1 fungible token (EVT token)\n                memo: \"Investor\" // Comment or extra data\n            })\n        );\n\n        let ownerBalanceAfter = await apiOwner.getFungibleBalance(ownerKeyPublic, 1);\n\n        //make sure owner balance is increased after transfer or else return\n        if(ownerBalanceAfter <= ownerBalanceBefore)\n        return;\n\n        //transfer evt to owner\n        //check transfer is complete\n        //transfer degron to user     \n            \n        let ownerTRX = await apiOwner.pushTransaction(\n        { maxCharge: 100000 },   // limit of the transaction fee\n        new window.EVT.EvtAction(\"transferft\", {\n            from: ownerKeyPublic, // sender\n            to: userKeyPublic, // receiver\n            number: userEVT + \".00000 S#567\", // S#1 means the No 1 fungible token (EVT token)\n            memo: \"Customer\" // Comment or extra data\n        })\n        );\n        //alert(\"Transfer complete\");\n        document.getElementById(\"investClear\").innerHTML = \"Invested!\";\n        document.getElementById(\"sendEVT\").value = '';\n        document.getElementById(\"deg\").value = \"loading degron\";\n        let deg = await apiUser.getFungibleBalance(userKeyPublic, 567);   \n        document.getElementById(\"deg\").value = deg;\n       }\n\n\n    export async function importWallet(){\n        \n        //alert(\"okay\");\n        let userKeyPrivate = \"5K9esKA7AKFQ7JpCRPvCMPRozTynhdahHYVo64v2CWXQjLgrNto\";\n        let userKeyPublic = \"EVT7mo5QXe86bd3J27Gn4cQpf7VVntcZeF86Kw3baNgGFsMLK9atg\";\n\n        const network = {\n        host: 'testnet1.everitoken.io', \n        port: 8888,                     \n        protocol: 'http'               \n        };\n\n        // get apiUser instance\n        apiUser = await window.EVT({\n        endpoint: network,\n        keyProvider: [ userKeyPrivate ] \n        });\n\n        try{\n            if(apiUser != null){\n                document.getElementById(\"status\").value = \"Connected\";\n                var version = 3;\n                let info = await apiUser.getInfo();\n                let apiVersion = info.evt_api_version.split(\".\")[0];\n                document.getElementById(\"version\").value = info.evt_api_version;\n\n                //version check\n                if(apiVersion == version)\n                    versionCheck = true;\n\n                //if invalid version prevent code from running\n                else {\n                    versionCheck = false;\n                    return;\n                }\n                    \n                \n             }\n             else{\n                 alert(\"EveriToken api is not ready, be patient\");\n             }\n            }\n            catch(e){\n                console.log(e.message);\n            }\n\n        try{\n            \n            document.getElementById(\"evt\").value = \"loading evt\";\n            let evt = await apiUser.getFungibleBalance(userKeyPublic, 1);\n            document.getElementById(\"evt\").value = evt;\n            document.getElementById(\"deg\").value = \"loading degron\";\n            let deg = await apiUser.getFungibleBalance(userKeyPublic, 567);   \n            document.getElementById(\"deg\").value = deg;\n        }\n        catch(e)\n        {\n            document.getElementById(\"evt\").value = e.message;\n            document.getElementById(\"deg\").value = e.message;\n        }\n    }"]},"metadata":{},"sourceType":"module"}